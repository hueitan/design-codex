// Common Less mixin library for Codex.
// Featuring mixins, that are not component or component group specific.

/* stylelint-disable selector-class-pattern */

// Support Webkit/Blink: Force element on own GPU composite layer
// Can be used in order to help establish smooth, jank-free scrolling in
// connection with CSS animations or tame `opacity` bug. Use sparingly & wisely!
// See T154460 & T182257.
.force-gpu-composite-layer() {
	transform: translateZ( 0 );
}

// CSS3 hyphenation. In the future, when browser support is wider, we may include some CSS4
// properties to improve hyphenation behavior.
// It is advisable to set the `lang` attribute on the HTML element to enable hyphenation support.
.hyphens( @param-value: auto ) {
	// Chrome < 55 and Android 4.0 Browser support `-webkit-hyphens: none`,
	// but not the `auto` value.
	// Chrome 55-87 only supports `auto` exclusively on Mac platform.
	hyphens: @param-value;
}

// Apply word-breaking CSS rules to ensure long words, URLs, and numbers do not overflow their
// container and break onto newlines sensibly.
// @param {boolean} should-break Whether long strings should break to avoid overflow
// @param {string} overflow-wrap Value of the overflow-wrap property. Refer to https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-wrap#values
.break-words( @param-should-break: true, @param-overflow-wrap: anywhere ) {
	& when ( @param-should-break = true ) {
		// Support Firefox 3.5+, Opera 11.5+, and Android 2.1+.
		// `overflow-wrap` is W3 standard, but it doesn't seem as if browser vendors
		//   will abandon `word-wrap` (it has wider support).
		// Note that this property has many shortcomings that are fixed in the rulesets below for
		// more modern browsers.
		word-wrap: break-word;

		// Better word-breaking for Edge 12+, Firefox 67+, Chrome 4+, Safari 3.1+, Opera 15+,
		// iOS 3.2+, and Android 4.4+. This will break things like long numbers and URLs, but the
		// `break-word` value is deprecated since 2019. `word-break: break-word` has the same effect
		// as `overflow-wrap: anywhere` combined with `word-break: normal`.
		@supports ( word-break: break-word; ) {
			word-wrap: unset;
			word-break: break-word;
		}

		// Use the current standard, `overflow-wrap`.
		@supports ( overflow-wrap: @param-overflow-wrap ) {
			word-break: normal;
			// No need to `word-wrap: unset` as `overflow-wrap` is a superset of `word-wrap`.
			overflow-wrap: @param-overflow-wrap;
		}

		// Apply CSS hyphens only in languages for which they are critical to readability.
		&:lang( de ),
		&:lang( de-AT ),
		&:lang( de-CH ),
		&:lang( de-DE ),
		&:lang( de-LI ),
		&:lang( de-LU ),
		&:lang( de-x-formal ) {
			.hyphens();
		}
	}

	& when ( @param-should-break = false ) {
		word-wrap: unset;
		word-break: unset;
		overflow-wrap: unset;
	}
}

// Truncate overflow text with value of `ellipsis` (mixin default),
// a custom string (Firefox 9+ only) or show.
// Recommended usage: `.text-overflow( @param-visible: false )` for best readability.
.text-overflow( @param-visible: false, @param-value: ellipsis ) {
	& when ( @param-visible = true ) {
		overflow: visible;
		text-overflow: @text-overflow-clip;
		white-space: normal;
	}
	& when ( @param-visible = false ) {
		// Hide overflowing text.
		overflow: hidden;
		& when ( @param-value = ellipsis ) {
			// Use an ellipsis to indicate text overflow.
			text-overflow: @text-overflow-ellipsis;
		}
		& when not ( @param-value = ellipsis ) {
			// Use a custom string to indicate text overflow.
			// Firefox 9+ only.
			text-overflow: @param-value;
		}
		// Force overflow of the description text.
		white-space: nowrap;
	}
}

// Screen Reader Helper Mixin for visually hidden text.
.screen-reader-text() {
	display: block;
	clip: rect( @size-absolute-1, @size-absolute-1, @size-absolute-1, @size-absolute-1 );
	/* stylelint-disable-next-line declaration-no-important */
	position: absolute !important;
	width: @size-absolute-1;
	height: @size-absolute-1;
	// Use negative `@size-absolute-1` token here as they are inherently connected.
	margin: calc( -1 * @size-absolute-1 );
	border: 0;
	padding: 0;
	overflow: hidden;
}

/* stylelint-enable selector-class-pattern */
